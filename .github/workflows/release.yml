name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/thomaslazar/pihole-dnspropagate

jobs:
  tag-build-release:
    name: tag-build-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version
        id: version
        run: |
          VERSION=$(tr -d '\n' < VERSION)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"

      - name: Fetch tags and check if release already exists
        id: check
        run: |
          git fetch --tags
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: steps.check.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release image
        if: steps.check.outputs.exists == 'false'
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Create annotated tag
        if: steps.check.outputs.exists == 'false'
        run: |
          git config user.name "Release Bot"
          git config user.email "releases@razal.de"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Generate release notes
        if: steps.check.outputs.exists == 'false'
        id: notes
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.version.outputs.version }}
          DIGEST: ${{ steps.docker_build.outputs.digest }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        with:
          script: |
            const version = process.env.VERSION;
            const digest = process.env.DIGEST;
            const imageName = process.env.IMAGE_NAME;
            const notes = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              target_commitish: context.sha
            });
            const body = `${notes.data.body}\n\n## Container Images\n- ${imageName}:${version} (digest: ${digest})\n- ${imageName}:latest`;
            core.setOutput('body', body);

      - name: Draft GitHub release
        if: steps.check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: ${{ steps.notes.outputs.body }}
